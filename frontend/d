<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FileShare - –°–µ—Ä–≤–∏—Å –æ–±–º–µ–Ω–∞ —Ñ–∞–π–ª–∞–º–∏</title>

</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìÅ FileShare</h1>
            <p>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω —Ñ–∞–π–ª–∞–º–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏</p>
        </div>

        <div class="auth-section" id="authSection">
            <div class="auth-form" id="loginForm">
                <input type="text" id="username" placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" required>
                <input type="password" id="password" placeholder="–ü–∞—Ä–æ–ª—å" required>
                <button onclick="login()">–í–æ–π—Ç–∏</button>
                <button onclick="register()" style="background: #00b894;">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</button>
            </div>
            <div class="user-info" id="userInfo" style="display: none;">
                <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <span id="currentUser"></span>! 
                <button onclick="logout()" style="background: #d63031; color: white; border: none; padding: 5px 10px; border-radius: 5px; cursor: pointer; margin-left: 10px;">–í—ã–π—Ç–∏</button></p>
            </div>
        </div>

        <div class="upload-section">
            <div class="upload-area" id="uploadArea" onclick="document.getElementById('fileInput').click()">
                <div class="upload-icon">üì§</div>
                <div class="upload-text">–ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞</div>
                <div style="color: #999; font-size: 0.9em;">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100MB</div>
            </div>
            <input type="file" id="fileInput" class="file-input" onchange="handleFile(this.files[0])">
            
            <div class="progress-container" id="progressContainer">
                <div class="progress-bar" id="progressBar"></div>
                <div class="progress-text" id="progressText">–ó–∞–≥—Ä—É–∑–∫–∞... 0%</div>
            </div>
        </div>

        <div class="result-section" id="resultSection">
            <div class="file-info" id="fileInfo">
                <div class="file-name" id="fileName"></div>
                <div class="file-size" id="fileSize"></div>
            </div>
            
            <div class="download-link">
                <h3>–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:</h3>
                <div class="download-url" id="downloadUrl" onclick="copyToClipboard()"></div>
                <small style="color: #666;">–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</small>
            </div>
        </div>

        <div class="stats-section">
            <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div class="stats-grid" id="statsGrid">
                <div class="stat-card">
                    <div class="stat-value" id="totalFiles">-</div>
                    <div class="stat-label">–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="totalSize">-</div>
                    <div class="stat-label">–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="totalDownloads">-</div>
                    <div class="stat-label">–°–∫–∞—á–∏–≤–∞–Ω–∏–π</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const API_BASE = 'http://localhost:3000/api';
        let currentUser = null;
        let authToken = null;
        document.addEventListener('DOMContentLoaded', () => {
            setupDragAndDrop();
            checkAuthToken();
            loadStats();
        });
        function checkAuthToken() {
            const token = sessionStorage.getItem('authToken');
            const username = sessionStorage.getItem('username');
            
            if (token && username) {
                authToken = token;
                currentUser = username;
                showUserInfo();
                enableUpload();
            } else {
                disableUpload();
            }
        }
        function setupDragAndDrop() {
            const uploadArea = document.getElementById('uploadArea');
            
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });
            
            uploadArea.addEventListener('dragleave', () => {
                uploadArea.classList.remove('dragover');
            });
            
            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                
                if (!authToken) {
                    showError('–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
                    return;
                }
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleFile(files[0]);
                }
            });
        }
        async function login() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            if (!username || !password) {
                showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
                return;
            }
            
            try {
                const response = await fetch(`${API_BASE}/auth/login`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ username, password })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    authToken = data.token;
                    currentUser = username;
                    sessionStorage.setItem('authToken', authToken);
                    sessionStorage.setItem('username', username);
                    showUserInfo();
                    enableUpload();
                    showSuccess('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
                    loadStats();
                } else {
                    showError(data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                }
            } catch (error) {
                showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            }
        }
        async function register() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            if (!username || !password) {
                showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
                return;
            }
            
            try {
                const response = await fetch(`${API_BASE}/auth/register`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ username, password })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showSuccess('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É');
                } else {
                    showError(data.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
                }
            } catch (error) {
                showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            }
        }
        function logout() {
            authToken = null;
            currentUser = null;
            sessionStorage.removeItem('authToken');
            sessionStorage.removeItem('username');
            showLoginForm();
            disableUpload();
            hideResult();
        }
        function showUserInfo() {
            document.getElementById('loginForm').style.display = 'none';
            document.getElementById('userInfo').style.display = 'block';
            document.getElementById('currentUser').textContent = currentUser;
        }
        function showLoginForm() {
            document.getElementById('loginForm').style.display = 'flex';
            document.getElementById('userInfo').style.display = 'none';
            document.getElementById('username').value = '';
            document.getElementById('password').value = '';
        }
        function enableUpload() {
            document.getElementById('uploadArea').classList.remove('disabled');
        }
        function disableUpload() {
            document.getElementById('uploadArea').classList.add('disabled');
        }
        async function handleFile(file) {
            if (!file) return;
            
            if (!authToken) {
                showError('–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
                return;
            }
            
            if (file.size > 100 * 1024 * 1024) {
                showError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100MB');
                return;
            }
            
            showProgress();
            hideResult();
            
            const formData = new FormData();
            formData.append('file', file);
            
            try {
                const xhr = new XMLHttpRequest();
                
                xhr.upload.addEventListener('progress', (e) => {
                    if (e.lengthComputable) {
                        const percentComplete = (e.loaded / e.total) * 100;
                        updateProgress(percentComplete);
                    }
                });
                
                xhr.onload = function() {
                    hideProgress();
                    
                    if (xhr.status === 200) {
                        const data = JSON.parse(xhr.responseText);
                        showResult(file, data.downloadUrl);
                        loadStats();
                    } else {
                        const error = JSON.parse(xhr.responseText);
                        showError(error.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
                    }
                };
                
                xhr.onerror = function() {
                    hideProgress();
                    showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
                };
                
                xhr.open('POST', `${API_BASE}/upload`);
                xhr.setRequestHeader('Authorization', `Bearer ${authToken}`);
                xhr.send(formData);
                
            } catch (error) {
                hideProgress();
                showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
            }
        }
        function showProgress() {
            document.getElementById('progressContainer').style.display = 'block';
            updateProgress(0);
        }
        function updateProgress(percent) {
            document.getElementById('progressBar').style.width = percent + '%';
            document.getElementById('progressText').textContent = `–ó–∞–≥—Ä—É–∑–∫–∞... ${Math.round(percent)}%`;
        }
        function hideProgress() {
            document.getElementById('progressContainer').style.display = 'none';
        }
        function showResult(file, downloadUrl) {
            document.getElementById('fileName').textContent = file.name;
            document.getElementById('fileSize').textContent = formatFileSize(file.size);
            document.getElementById('downloadUrl').textContent = downloadUrl;
            document.getElementById('resultSection').style.display = 'block';
        }
        function hideResult() {
            document.getElementById('resultSection').style.display = 'none';
        }
        function copyToClipboard() {
            const url = document.getElementById('downloadUrl').textContent;
            navigator.clipboard.writeText(url).then(() => {
                showSuccess('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            });
        }
        async function loadStats() {
            if (!authToken) {
                document.getElementById('totalFiles').textContent = '-';
                document.getElementById('totalSize').textContent = '-';
                document.getElementById('totalDownloads').textContent = '-';
                return;
            }
            
            try {
                const response = await fetch(`${API_BASE}/stats`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('totalFiles').textContent = data.totalFiles;
                    document.getElementById('totalSize').textContent = formatFileSize(data.totalSize);
                    document.getElementById('totalDownloads').textContent = data.totalDownloads;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            }
        }
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        function showError(message) {
            const existing = document.querySelector('.error');
            if (existing) existing.remove();
            
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error';
            errorDiv.textContent = message;
            document.querySelector('.upload-section').appendChild(errorDiv);
            
            setTimeout(() => errorDiv.remove(), 5000);
        }
        function showSuccess(message) {
            const existing = document.querySelector('.success');
            if (existing) existing.remove();
            
            const successDiv = document.createElement('div');
            successDiv.className = 'success';
            successDiv.textContent = message;
            document.querySelector('.upload-section').appendChild(successDiv);
            
            setTimeout(() => successDiv.remove(), 3000);
        }
    </script>
</body>
</html>